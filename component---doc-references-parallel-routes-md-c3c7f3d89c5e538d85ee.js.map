{"version":3,"sources":["webpack:///../doc/references/parallel-routes.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sRAMaA,EAAe,QAAG,yOAC/B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,EAAK,iBAER,OAAO,YAACJ,EAAS,eAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,mBAAiB,mBAEzB,kBACE,GAAM,YAAU,YAElB,oKACA,uBAAK,oBAAMC,WAAW,OAAK,iDAE3B,sBACE,kBAAIA,WAAW,MAAI,gCAAkC,0BAAYA,WAAW,MAAI,cAA4B,6CAC5G,kBAAIA,WAAW,MAAI,sBAAwB,0BAAYA,WAAW,MAAI,sBAAoC,4DAA6D,0BAAYA,WAAW,MAAI,WAAyB,KAC3N,kBAAIA,WAAW,MAAI,qBAAuB,0BAAYA,WAAW,MAAI,gBAA8B,cAAe,sBAAQA,WAAW,MAAI,UAAoB,8BAE/J,6EACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eAAa,yQAoB9B,gIAA+G,0BAAYA,WAAW,KAAG,0BAAwC,aAAc,0BAAYA,WAAW,KAAG,8CAA4D,yBAA0B,0BAAYA,WAAW,KAAG,gCAA8C,sBAAuB,0BAAYA,WAAW,KAAG,WAAyB,qBACjc,kBACE,GAAM,6BAA2B,6BAEnC,8PAA6O,0BAAYA,WAAW,KAAG,gBAA8B,WACrS,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eAAa,0EAG9B,kCAAiB,iBAAGA,WAAW,IAC3B,KAAQ,2CAAyC,iBAC3B,0BAC1B,kBACE,GAAM,2BAAyB,2BAEjC,uDAAsC,0BAAYA,WAAW,KAAG,SAAuB,YACvF,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eAAa,yCAG9B,mFAAkE,0BAAYA,WAAW,KAAG,UAAwB,YACpH,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eAAa,6DAG9B,yCAAwB,0BAAYA,WAAW,KAAG,UAAwB,6BAA8B,0BAAYA,WAAW,KAAG,SAAuB,sBACzJ,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBAAc,+DAK/B,gFACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBAAc,wIAK/B,kBACE,GAAM,0BAAwB,0BAEhC,mJAGH,uOAEDJ,EAAWK,gBAAiB","file":"component---doc-references-parallel-routes-md-c3c7f3d89c5e538d85ee.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/vilicvane/projects/makeflow/boring-router/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"parallel-routes\"\n    }}>{`Parallel Routes`}</h1>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`We can define multiple routes parallel to each other within a single web app using Boring Router. Let's look at a URL with parallel routes:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/workbench?_overlay=/task/123&mode=default\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The first part of the URL is `}<inlineCode parentName=\"li\">{`/workbench`}</inlineCode>{`, which is the path of the primary route.`}</li>\n      <li parentName=\"ul\">{`The second part is `}<inlineCode parentName=\"li\">{`_overlay=/task/123`}</inlineCode>{`, which includes the name and path of the parallel route `}<inlineCode parentName=\"li\">{`overlay`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`The third part is `}<inlineCode parentName=\"li\">{`mode=default`}</inlineCode>{`, which is `}<strong parentName=\"li\">{`shared`}</strong>{` between parallel routes.`}</li>\n    </ul>\n    <p>{`Creating parallel routes in Boring Router is simple:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const route = router.$({\n  workbench: {\n    $query: {\n      mode: true,\n    },\n  },\n  settings: true,\n});\n\nconst overlayRoute = router.$('overlay', {\n  task: {\n    $children: {\n      taskId: {\n        $match: /\\\\d+/,\n      },\n    },\n  },\n});\n`}</code></pre>\n    <p>{`Navigation using a route object is by default independent to its parallel routes. This means if we call `}<inlineCode parentName=\"p\">{`route.settings.$push()`}</inlineCode>{` with URL `}<inlineCode parentName=\"p\">{`/workbench?_overlay=/task/123&mode=default`}</inlineCode>{`, it will navigate to `}<inlineCode parentName=\"p\">{`/settings?_overlay=/task/123`}</inlineCode>{` while keeping the `}<inlineCode parentName=\"p\">{`overlay`}</inlineCode>{` route untouched.`}</p>\n    <h2 {...{\n      \"id\": \"combining-multiple-routes\"\n    }}>{`Combining Multiple Routes`}</h2>\n    <p>{`Most of the time having routes independent to each other brings convenience, there are still scenarios in which we need to put them together. For example sometimes we might want to navigate with both routes. This can be done with `}<inlineCode parentName=\"p\">{`RouteBuilder`}</inlineCode>{`, e.g.:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`route.workbench.$(overlayRoute.task.taskId, {taskId: 456}).$push();\n`}</code></pre>\n    <p>{`Check out `}<a parentName=\"p\" {...{\n        \"href\": \"/boring-router/references/route-builder\"\n      }}>{`Route Builder`}</a>{` for more information.`}</p>\n    <h2 {...{\n      \"id\": \"leaving-parallel-routes\"\n    }}>{`Leaving Parallel Routes`}</h2>\n    <p>{`To leave the route itself, use `}<inlineCode parentName=\"p\">{`leave`}</inlineCode>{` option:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`sidebarRoute.$push({leave: true});\n`}</code></pre>\n    <p>{`To leave other or multiple routes during a navigation, use `}<inlineCode parentName=\"p\">{`leaves`}</inlineCode>{` option:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`route.foo.bar.$push({leaves: ['sidebar', 'overlay']});\n`}</code></pre>\n    <p>{`If you are using `}<inlineCode parentName=\"p\">{`<Link>`}</inlineCode>{` component, you can add a `}<inlineCode parentName=\"p\">{`leave`}</inlineCode>{` boolean property:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Link to={sidebarRoute} leave>\n  Close Sidebar\n</Link>\n`}</code></pre>\n    <p>{`And you can always use route builder for complex cases:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Link to={route.workbench.$(sidebarRoute.notification).$leave(['overlay'])}>\n  Open Workbench with Notification Sidebar\n</Link>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"experimental-whitelist\"\n    }}>{`Experimental Whitelist`}</h2>\n    <p>{`Parallel routes currently support an experimental whitelist feature, check out the source code for more information.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
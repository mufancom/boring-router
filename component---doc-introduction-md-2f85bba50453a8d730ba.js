(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"3L8V":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return u}));var o=n("Fcif"),r=n("+I+c"),a=(n("mXGw"),n("/FXl")),i=n("TjRS"),s=(n("aD51"),["components"]),c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!Object.prototype.hasOwnProperty.call(c,"__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"doc/introduction.md"}});var l={_frontmatter:c},b=i.a;function u(e){var t=e.components,n=Object(r.a)(e,s);return Object(a.b)(b,Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"introduction"},"Introduction"),Object(a.b)("p",null,"Boring Router is a state-first router with light-weight route components. It manages observable (MobX) route states like ",Object(a.b)("inlineCode",{parentName:"p"},"route.$matched")," and ",Object(a.b)("inlineCode",{parentName:"p"},"route.$params"),", so the route components as well as your code can react to those states. Boring Router is written in TypeScript and it puts type safety in mind designing the API."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Check out examples ",Object(a.b)("a",{parentName:"p",href:"/boring-router/examples"},"here"),".")),Object(a.b)("h2",{id:"route-notation"},"Route Notation"),Object(a.b)("p",null,"Boring Router uses schema-based, type-safe route notation. You don't need, and it is not recommended to write routes as strings with Boring Router."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"const route = router.$route({\n  $children: {\n    workbench: {\n      $children: {\n        taskId: {\n          $match: /\\d+/,\n        },\n      },\n    },\n  },\n});\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"<Route match={route.workbench.taskId} component={WorkbenchTaskView} />\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"<Link to={route.workbench.taskId} params={{taskId: '123'}}>\n  Go to Task\n</Link>\n")),Object(a.b)("p",null,"Route schema can be shared with Node.js backend and this makes route notations type-safe everywhere."),Object(a.b)("h2",{id:"parallel-routes"},"Parallel Routes"),Object(a.b)("p",null,"Views like sidebar, overlay can be easily routed with Boring Router parallel routes."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"const route = router.$route({\n  /* primary route schema */\n});\n\nconst sidebarRoute = router.$route('sidebar', {\n  /* sidebar route schema */\n});\n")),Object(a.b)("p",null,"URL for parallel routes looks like ",Object(a.b)("inlineCode",{parentName:"p"},"/workbench?_sidebar=/notifications"),", and additional parallel routes work just like primary route in most cases."),Object(a.b)("h2",{id:"lifecycle-hooks"},"Lifecycle Hooks"),Object(a.b)("p",null,"Boring Router supports ",Object(a.b)("inlineCode",{parentName:"p"},"before/will/after")," x ",Object(a.b)("inlineCode",{parentName:"p"},"enter/update/leave")," hooks."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"route.workbench.$beforeEnter(async next => {\n  let {referrer} = next.$params;\n\n  if (await testReferrer(referrer)) {\n    return;\n  }\n\n  route.$replace();\n});\n")),Object(a.b)("p",null,"To support full lifecycle hooks while keeping history navigation behavior right, Boring Router implements its own ",Object(a.b)("inlineCode",{parentName:"p"},"BrowserHistory")," with the ability to restore browser history stack according to a given snapshot."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Check out an example ",Object(a.b)("a",{href:"https://codesandbox.io/s/github/makeflow/boring-router/tree/master/packages/examples/lifecycle-hooks?file=/main.tsx&expanddevtools=1",target:"_blank"},"here"),".")))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!Object.prototype.hasOwnProperty.call(u,"__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"doc/introduction.md"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---doc-introduction-md-2f85bba50453a8d730ba.js.map